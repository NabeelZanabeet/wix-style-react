// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`copyTemplates should work as expected when description is not provided 1`] = `
Object {
  "src/MyNewComponent/MyNewComponent.e2e.js": "import {
  waitForVisibilityOf,
  scrollToElement,
} from 'wix-ui-test-utils/protractor';

import { eyesItInstance } from '../../test/utils/eyes-it';
import { createTestStoryUrl } from '../../test/utils/storybook-helpers';
import { myNewComponentTestkitFactory } from '../../testkit/protractor';
import { storySettings } from '../../stories/components/MyNewComponent/storySettings';

const eyes = eyesItInstance();

describe('MyNewComponent', () => {
  const createStoryUrl = testName => {
    const { category, storyName } = storySettings;

    createTestStoryUrl({
      category,
      storyName,
      testName,
    });
  };

  const createDriver = async (dataHook = storySettings.dataHook) => {
    const driver = myNewComponentTestkitFactory({ dataHook });

    await waitForVisibilityOf(
      await driver.element(),
      \`Cannot find <MyNewComponent/> component with dataHook of \${dataHook}\`,
    );

    await scrollToElement(await driver.element());

    return driver;
  };

  const testStoryNames = storySettings.testStoryNames;

  eyes.it('should increase count when button clicked', async () => {
    await browser.get(createStoryUrl(testStoryNames.DEFAULT));
    const driver = await createDriver();
    await driver.clickButton();
    expect(await driver.getCountText()).toBe('You clicked this button 1 times');
  });
});
",
  "src/MyNewComponent/MyNewComponent.js": "import React from 'react';
import PropTypes from 'prop-types';
import styles from './MyNewComponent.scss';

import Text from '../Text';
import Button from '../Button';


class MyNewComponent extends React.PureComponent {
  static displayName = 'MyNewComponent';

  static propTypes = {
    dataHook: PropTypes.string,

    /** Text for the button */
    buttonText: PropTypes.string,
  };

  static defaultProps = {
    buttonText: 'Click me!',
  };

  state = {
    count: 0,
  };

  _handleClick = () => {
    this.setState(({ count }) => ({
      count: count + 1,
    }));
  };

  render() {
    const { count } = this.state;
    const { dataHook, buttonText } = this.props;

    return (
      <div className={styles.root} data-hook={dataHook}>
        <Text dataHook=\\"myNewComponent-count\\">
          You clicked this button {count} times
        </Text>

        <div className={styles.button}>
          <Button
            onClick={this._handleClick}
            dataHook=\\"myNewComponent-button\\"
          >
            {buttonText}
          </Button>
        </div>
      </div>
    );
  }
}

export default MyNewComponent;
",
  "src/MyNewComponent/MyNewComponent.meta.js": "import MyNewComponent from './MyNewComponent';
import Registry from '@ui-autotools/registry';

const metadata = Registry.getComponentMetadata(MyNewComponent);

metadata.exportedFrom({
  path: 'src/MyNewComponent/MyNewComponent.js',
});
",
  "src/MyNewComponent/MyNewComponent.private.uni.driver.js": "import { myNewComponentDriverFactory as publicDriverFactory } from './MyNewComponent.uni.driver';

export const myNewComponentPrivateDriverFactory = base => {
  return {
    ...publicDriverFactory(base),

    // Add here driver methods that considered \\"private\\"
  };
};
",
  "src/MyNewComponent/MyNewComponent.scss": ".root {
  text-align: center;
}

.button {
  display: flex;
  justify-content: space-evenly;
}
",
  "src/MyNewComponent/MyNewComponent.spec.js": "import React from 'react';
import { createUniDriverFactory } from 'wix-ui-test-utils/uni-driver-factory';

import MyNewComponent from './MyNewComponent';
import { myNewComponentPrivateDriverFactory } from './MyNewComponent.private.uni.driver';

describe('MyNewComponent', () => {
  const createDriver = createUniDriverFactory(
    myNewComponentPrivateDriverFactory,
  );

  it('should render', async () => {
    const driver = createDriver(<MyNewComponent />);

    expect(await driver.exists()).toBeTruthy();
    expect(await driver.getButtonText()).toEqual('Click me!');
  });

  it('should increment', async () => {
    const driver = createDriver(<MyNewComponent />);

    await driver.clickButton();
    await driver.clickButton();

    expect(await driver.getCountText()).toEqual(
      'You clicked this button 2 times',
    );
  });

  it('should allow changing the button text', async () => {
    const driver = createDriver(
      <MyNewComponent buttonText=\\"Press me\\" />,
    );

    expect(await driver.getButtonText()).toEqual('Press me');
  });
});
",
  "src/MyNewComponent/MyNewComponent.uni.driver.js": "import { baseUniDriverFactory } from 'wix-ui-test-utils/base-driver';

export const myNewComponentDriverFactory = base => {
  return {
    ...baseUniDriverFactory(base),

    /** Get the current count */
    getCountText: async () =>
      base.$('[data-hook=\\"myNewComponent-count\\"]').text(),

    /** Click the button */
    clickButton: async () =>
      base.$('[data-hook=\\"myNewComponent-button\\"]').click(),

    /** Get the button's text */
    getButtonText: async () =>
      base.$('[data-hook=\\"myNewComponent-button\\"]').text(),
  };
};
",
  "src/MyNewComponent/index.js": "export { default } from './MyNewComponent.js';
",
  "stories/components/MyNewComponent/MyNewComponentTestStories.js": "import React from 'react';
import { storiesOf } from '@storybook/react';
import { getTestStoryKind } from '../../storiesHierarchy';
import { storySettings } from './storySettings';

import MyNewComponent from '../../../src/MyNewComponent';

const TestStories = storiesOf(getTestStoryKind(storySettings), module);
const { testStoryNames, dataHook } = storySettings;

TestStories.add(testStoryNames.DEFAULT, () => (
  <MyNewComponent
    dataHook={dataHook}
    buttonText=\\"Press me for a surprise\\"
  />
));
",
  "stories/components/MyNewComponent/index.story.js": "import React from 'react';
import { storySettings } from './storySettings';
import LiveCodeExample from '../../utils/Components/LiveCodeExample';

import MyNewComponent from '../../../src/MyNewComponent';

export default {
  category: storySettings.category,
  storyName: storySettings.storyName,

  component: MyNewComponent,
  componentPath: '../../../src/MyNewComponent/MyNewComponent.js',

  componentProps: {
    dataHook: storySettings.dataHook,
    buttonText: undefined,
  },

  exampleProps: {
    // Put here presets of props, for more info:
    // https://github.com/wix/wix-ui/blob/master/packages/wix-storybook-utils/docs/usage.md#using-list
  },

  examples: (
    <div style={{ maxWidth: 627 }}>
      <LiveCodeExample
        compact
        title=\\"Live code example\\"
        initialCode={\`
<MyNewComponent
  dataHook=\\"story-my-new-component-live-example\\"
  buttonText=\\"Press me for a surprise\\"
  />
        \`}
      />
    </div>
  ),
};

",
  "stories/components/MyNewComponent/storySettings.js": "import { Category } from '../../storiesHierarchy';

export const storySettings = {
  category: Category.COMPONENTS,
  storyName: 'MyNewComponent',
  dataHook: 'story-my-new-component',
  testStoryNames: {
    DEFAULT: 'Default',
  },
};
",
}
`;

exports[`copyTemplates should work as expected when description is provided 1`] = `
Object {
  "src/MyNewComponent/MyNewComponent.e2e.js": "import {
  waitForVisibilityOf,
  scrollToElement,
} from 'wix-ui-test-utils/protractor';

import { eyesItInstance } from '../../test/utils/eyes-it';
import { createTestStoryUrl } from '../../test/utils/storybook-helpers';
import { myNewComponentTestkitFactory } from '../../testkit/protractor';
import { storySettings } from '../../stories/components/MyNewComponent/storySettings';

const eyes = eyesItInstance();

describe('MyNewComponent', () => {
  const createStoryUrl = testName => {
    const { category, storyName } = storySettings;

    createTestStoryUrl({
      category,
      storyName,
      testName,
    });
  };

  const createDriver = async (dataHook = storySettings.dataHook) => {
    const driver = myNewComponentTestkitFactory({ dataHook });

    await waitForVisibilityOf(
      await driver.element(),
      \`Cannot find <MyNewComponent/> component with dataHook of \${dataHook}\`,
    );

    await scrollToElement(await driver.element());

    return driver;
  };

  const testStoryNames = storySettings.testStoryNames;

  eyes.it('should increase count when button clicked', async () => {
    await browser.get(createStoryUrl(testStoryNames.DEFAULT));
    const driver = await createDriver();
    await driver.clickButton();
    expect(await driver.getCountText()).toBe('You clicked this button 1 times');
  });
});
",
  "src/MyNewComponent/MyNewComponent.js": "import React from 'react';
import PropTypes from 'prop-types';
import styles from './MyNewComponent.scss';

import Text from '../Text';
import Button from '../Button';

/**
 * This is a very cool component, ya'll
 */
class MyNewComponent extends React.PureComponent {
  static displayName = 'MyNewComponent';

  static propTypes = {
    dataHook: PropTypes.string,

    /** Text for the button */
    buttonText: PropTypes.string,
  };

  static defaultProps = {
    buttonText: 'Click me!',
  };

  state = {
    count: 0,
  };

  _handleClick = () => {
    this.setState(({ count }) => ({
      count: count + 1,
    }));
  };

  render() {
    const { count } = this.state;
    const { dataHook, buttonText } = this.props;

    return (
      <div className={styles.root} data-hook={dataHook}>
        <Text dataHook=\\"myNewComponent-count\\">
          You clicked this button {count} times
        </Text>

        <div className={styles.button}>
          <Button
            onClick={this._handleClick}
            dataHook=\\"myNewComponent-button\\"
          >
            {buttonText}
          </Button>
        </div>
      </div>
    );
  }
}

export default MyNewComponent;
",
  "src/MyNewComponent/MyNewComponent.meta.js": "import MyNewComponent from './MyNewComponent';
import Registry from '@ui-autotools/registry';

const metadata = Registry.getComponentMetadata(MyNewComponent);

metadata.exportedFrom({
  path: 'src/MyNewComponent/MyNewComponent.js',
});
",
  "src/MyNewComponent/MyNewComponent.private.uni.driver.js": "import { myNewComponentDriverFactory as publicDriverFactory } from './MyNewComponent.uni.driver';

export const myNewComponentPrivateDriverFactory = base => {
  return {
    ...publicDriverFactory(base),

    // Add here driver methods that considered \\"private\\"
  };
};
",
  "src/MyNewComponent/MyNewComponent.scss": ".root {
  text-align: center;
}

.button {
  display: flex;
  justify-content: space-evenly;
}
",
  "src/MyNewComponent/MyNewComponent.spec.js": "import React from 'react';
import { createUniDriverFactory } from 'wix-ui-test-utils/uni-driver-factory';

import MyNewComponent from './MyNewComponent';
import { myNewComponentPrivateDriverFactory } from './MyNewComponent.private.uni.driver';

describe('MyNewComponent', () => {
  const createDriver = createUniDriverFactory(
    myNewComponentPrivateDriverFactory,
  );

  it('should render', async () => {
    const driver = createDriver(<MyNewComponent />);

    expect(await driver.exists()).toBeTruthy();
    expect(await driver.getButtonText()).toEqual('Click me!');
  });

  it('should increment', async () => {
    const driver = createDriver(<MyNewComponent />);

    await driver.clickButton();
    await driver.clickButton();

    expect(await driver.getCountText()).toEqual(
      'You clicked this button 2 times',
    );
  });

  it('should allow changing the button text', async () => {
    const driver = createDriver(
      <MyNewComponent buttonText=\\"Press me\\" />,
    );

    expect(await driver.getButtonText()).toEqual('Press me');
  });
});
",
  "src/MyNewComponent/MyNewComponent.uni.driver.js": "import { baseUniDriverFactory } from 'wix-ui-test-utils/base-driver';

export const myNewComponentDriverFactory = base => {
  return {
    ...baseUniDriverFactory(base),

    /** Get the current count */
    getCountText: async () =>
      base.$('[data-hook=\\"myNewComponent-count\\"]').text(),

    /** Click the button */
    clickButton: async () =>
      base.$('[data-hook=\\"myNewComponent-button\\"]').click(),

    /** Get the button's text */
    getButtonText: async () =>
      base.$('[data-hook=\\"myNewComponent-button\\"]').text(),
  };
};
",
  "src/MyNewComponent/index.js": "export { default } from './MyNewComponent.js';
",
  "stories/components/MyNewComponent/MyNewComponentTestStories.js": "import React from 'react';
import { storiesOf } from '@storybook/react';
import { getTestStoryKind } from '../../storiesHierarchy';
import { storySettings } from './storySettings';

import MyNewComponent from '../../../src/MyNewComponent';

const TestStories = storiesOf(getTestStoryKind(storySettings), module);
const { testStoryNames, dataHook } = storySettings;

TestStories.add(testStoryNames.DEFAULT, () => (
  <MyNewComponent
    dataHook={dataHook}
    buttonText=\\"Press me for a surprise\\"
  />
));
",
  "stories/components/MyNewComponent/index.story.js": "import React from 'react';
import { storySettings } from './storySettings';
import LiveCodeExample from '../../utils/Components/LiveCodeExample';

import MyNewComponent from '../../../src/MyNewComponent';

export default {
  category: storySettings.category,
  storyName: storySettings.storyName,

  component: MyNewComponent,
  componentPath: '../../../src/MyNewComponent/MyNewComponent.js',

  componentProps: {
    dataHook: storySettings.dataHook,
    buttonText: undefined,
  },

  exampleProps: {
    // Put here presets of props, for more info:
    // https://github.com/wix/wix-ui/blob/master/packages/wix-storybook-utils/docs/usage.md#using-list
  },

  examples: (
    <div style={{ maxWidth: 627 }}>
      <LiveCodeExample
        compact
        title=\\"Live code example\\"
        initialCode={\`
<MyNewComponent
  dataHook=\\"story-my-new-component-live-example\\"
  buttonText=\\"Press me for a surprise\\"
  />
        \`}
      />
    </div>
  ),
};

",
  "stories/components/MyNewComponent/storySettings.js": "import { Category } from '../../storiesHierarchy';

export const storySettings = {
  category: Category.COMPONENTS,
  storyName: 'MyNewComponent',
  dataHook: 'story-my-new-component',
  testStoryNames: {
    DEFAULT: 'Default',
  },
};
",
}
`;

exports[`copyTemplates should work for test component 1`] = `
Object {
  "src/MyTestComponent/MyTestComponent.e2e.js": "import {
  waitForVisibilityOf,
  scrollToElement,
} from 'wix-ui-test-utils/protractor';

import { eyesItInstance } from '../../test/utils/eyes-it';
import { createTestStoryUrl } from '../../test/utils/storybook-helpers';
import { myTestComponentTestkitFactory } from '../../testkit/protractor';
import { storySettings } from '../../stories/components/MyTestComponent/storySettings';

const eyes = eyesItInstance();

describe('MyTestComponent', () => {
  const createStoryUrl = testName => {
    const { category, storyName } = storySettings;

    createTestStoryUrl({
      category,
      storyName,
      testName,
    });
  };

  const createDriver = async (dataHook = storySettings.dataHook) => {
    const driver = myTestComponentTestkitFactory({ dataHook });

    await waitForVisibilityOf(
      await driver.element(),
      \`Cannot find <MyTestComponent/> component with dataHook of \${dataHook}\`,
    );

    await scrollToElement(await driver.element());

    return driver;
  };

  const testStoryNames = storySettings.testStoryNames;

  eyes.it('should increase count when button clicked', async () => {
    await browser.get(createStoryUrl(testStoryNames.DEFAULT));
    const driver = await createDriver();
    await driver.clickButton();
    expect(await driver.getCountText()).toBe('You clicked this button 1 times');
  });
});
",
  "src/MyTestComponent/MyTestComponent.js": "import React from 'react';
import PropTypes from 'prop-types';
import styles from './MyTestComponent.scss';

import Text from '../Text';
import Button from '../Button';


class MyTestComponent extends React.PureComponent {
  static displayName = 'MyTestComponent';

  static propTypes = {
    dataHook: PropTypes.string,

    /** Text for the button */
    buttonText: PropTypes.string,
  };

  static defaultProps = {
    buttonText: 'Click me!',
  };

  state = {
    count: 0,
  };

  _handleClick = () => {
    this.setState(({ count }) => ({
      count: count + 1,
    }));
  };

  render() {
    const { count } = this.state;
    const { dataHook, buttonText } = this.props;

    return (
      <div className={styles.root} data-hook={dataHook}>
        <Text dataHook=\\"myTestComponent-count\\">
          You clicked this button {count} times
        </Text>

        <div className={styles.button}>
          <Button
            onClick={this._handleClick}
            dataHook=\\"myTestComponent-button\\"
          >
            {buttonText}
          </Button>
        </div>
      </div>
    );
  }
}

export default MyTestComponent;
",
  "src/MyTestComponent/MyTestComponent.meta.js": "import MyTestComponent from './MyTestComponent';
import Registry from '@ui-autotools/registry';

const metadata = Registry.getComponentMetadata(MyTestComponent);

metadata.exportedFrom({
  path: 'src/MyTestComponent/MyTestComponent.js',
});
",
  "src/MyTestComponent/MyTestComponent.private.uni.driver.js": "import { myTestComponentDriverFactory as publicDriverFactory } from './MyTestComponent.uni.driver';

export const myTestComponentPrivateDriverFactory = base => {
  return {
    ...publicDriverFactory(base),

    // Add here driver methods that considered \\"private\\"
  };
};
",
  "src/MyTestComponent/MyTestComponent.scss": ".root {
  text-align: center;
}

.button {
  display: flex;
  justify-content: space-evenly;
}
",
  "src/MyTestComponent/MyTestComponent.spec.js": "import React from 'react';
import { createUniDriverFactory } from 'wix-ui-test-utils/uni-driver-factory';

import MyTestComponent from './MyTestComponent';
import { myTestComponentPrivateDriverFactory } from './MyTestComponent.private.uni.driver';

describe('MyTestComponent', () => {
  const createDriver = createUniDriverFactory(
    myTestComponentPrivateDriverFactory,
  );

  it('should render', async () => {
    const driver = createDriver(<MyTestComponent />);

    expect(await driver.exists()).toBeTruthy();
    expect(await driver.getButtonText()).toEqual('Click me!');
  });

  it('should increment', async () => {
    const driver = createDriver(<MyTestComponent />);

    await driver.clickButton();
    await driver.clickButton();

    expect(await driver.getCountText()).toEqual(
      'You clicked this button 2 times',
    );
  });

  it('should allow changing the button text', async () => {
    const driver = createDriver(
      <MyTestComponent buttonText=\\"Press me\\" />,
    );

    expect(await driver.getButtonText()).toEqual('Press me');
  });
});
",
  "src/MyTestComponent/MyTestComponent.uni.driver.js": "import { baseUniDriverFactory } from 'wix-ui-test-utils/base-driver';

export const myTestComponentDriverFactory = base => {
  return {
    ...baseUniDriverFactory(base),

    /** Get the current count */
    getCountText: async () =>
      base.$('[data-hook=\\"myTestComponent-count\\"]').text(),

    /** Click the button */
    clickButton: async () =>
      base.$('[data-hook=\\"myTestComponent-button\\"]').click(),

    /** Get the button's text */
    getButtonText: async () =>
      base.$('[data-hook=\\"myTestComponent-button\\"]').text(),
  };
};
",
  "src/MyTestComponent/index.js": "export { default } from './MyTestComponent.js';
",
  "stories/components/MyTestComponent/MyTestComponentTestStories.js": "import React from 'react';
import { storiesOf } from '@storybook/react';
import { getTestStoryKind } from '../../storiesHierarchy';
import { storySettings } from './storySettings';

import MyTestComponent from '../../../src/MyTestComponent';

const TestStories = storiesOf(getTestStoryKind(storySettings), module);
const { testStoryNames, dataHook } = storySettings;

TestStories.add(testStoryNames.DEFAULT, () => (
  <MyTestComponent
    dataHook={dataHook}
    buttonText=\\"Press me for a surprise\\"
  />
));
",
  "stories/components/MyTestComponent/index.story.js": "import React from 'react';
import { storySettings } from './storySettings';

import MyTestComponent from '../../../src/MyTestComponent';

export default {
  category: storySettings.category,
  storyName: storySettings.storyName,

  component: MyTestComponent,
  componentPath: '../../../src/MyTestComponent/MyTestComponent.js',

  componentProps: {
    dataHook: storySettings.dataHook,
    buttonText: undefined,
  },

  exampleProps: {
    // Put here presets of props, for more info:
    // https://github.com/wix/wix-ui/blob/master/packages/wix-storybook-utils/docs/usage.md#using-list
  },

  examples: (
    <div style={{ maxWidth: 627 }}>
      <MyTestComponent
        dataHook=\\"story-my-test-component-live-example\\"
        buttonText=\\"Press me for a surprise\\"
      />
    </div>
  ),
};
",
  "stories/components/MyTestComponent/storySettings.js": "import { TESTS_PREFIX } from '../../storiesHierarchy';

export const storySettings = {
  category: TESTS_PREFIX,
  storyName: 'MyTestComponent',
  dataHook: 'story-my-test-component',
  testStoryNames: {
    DEFAULT: 'Default',
  },
};
",
}
`;
